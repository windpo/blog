---
import MetaHeader from "src/components/MetaHeader.astro";
import "remixicon/fonts/remixicon.css";
import "../styles/index.css";
import Nav from "../components/Nav.astro";
import Info from "src/components/Info.astro";
import Footer from "src/components/Footer.astro";
import PostInfo from "src/components/postInfo.astro";
import Donate from "src/components/Donate.astro";
// 当前激活的nav,当前文章的heading,frontmatter post页面才有值，page页面为undefined
const { activeNav, frontmatter, type = "page" } = Astro.props;
import { comment as commentConfig, donate as donateConfig } from "$/config.yml";
---

<!DOCTYPE html>
<html lang="en">
  <MetaHeader
    mathjaxEnable={frontmatter?.mathjax ? frontmatter.mathjax : false}
  />
  <body class="bg-skin-secondary" id="app">
    <Nav active={activeNav} />
    <div
      class="container mx-auto relative h-full flex flex-col justify-between"
    >
      <div class="flex justify-between mt-16 p-4 xl:px-0">
        <!-- 修复md文档宽度缩放的问题 -->
        <div class="text-skin-base lg:mr-8 responsive-container">
          <slot />

          {donateConfig.enable && frontmatter?.donate && <Donate />}
          {
            commentConfig.enable && frontmatter?.comment && (
              <div id="waline" class="mt-12" />
            )
          }
        </div>
        <div class="hidden shrink-0 w-64 2xl:block">
          {type === "page" ? <Info /> : <PostInfo frontmatter={frontmatter} />}
        </div>
      </div>
      <Footer />
    </div>
    <script>
      import { init } from "@waline/client";
      import { comment as commentConfig } from "$/config.yml";
      import Zooming from "zooming";
      import "@waline/client/dist/waline.css";
      const zooming = new Zooming();
      import ClipboardJS from "clipboard";
      const clipboard = new ClipboardJS(".copy-button");
      clipboard.on("success", function (e) {
        e.clearSelection();
      });

      clipboard.on("error", function (e) {});
      if (document.getElementById("waline") && commentConfig.enable) {
        init({
          el: "#waline",
          comment: true,
          path: window.location.pathname.replace(/\/$/, ""),
          serverURL: commentConfig.serverUrl,
          pageSize: commentConfig.pageSize,
          pageview: commentConfig.pageview, // 浏览量统计
          reaction: commentConfig.reaction, // 开启反应
          requiredMeta: commentConfig.requiredMeta,
          dark: 'html[data-theme="dark"]',
        });
      }

      // 给所有的a标签添加target属性和不追踪
      var markdownBody = document.querySelector(".markdown-body");
      // 如果没有markdownBody则直接返回
      if (markdownBody) {
        var links = markdownBody.querySelectorAll("a");
        // 循环遍历链接标签
        for (var i = 0; i < links.length; i++) {
          // 给每个链接标签添加 target 属性
          links[i].setAttribute("target", "_blank");
          links[i].setAttribute("rel", "nofollow");
        }

        // 给所有的图片添加懒加载
        let images = markdownBody.querySelectorAll("img");
        const callback = (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const image = entry.target;
              const data_src = image.getAttribute("alt");
              image.setAttribute("src", data_src);
              observer.unobserve(image);
            }
          });
        };
        const observer = new IntersectionObserver(callback);
        images.forEach((image) => {
          observer.observe(image);

          // 图片添加点击放大功能
          image.classList.add("zooming-image");
          zooming.listen(".zooming-image");
        });

        // 给所有的代码块添加复制功能
        let codePre = markdownBody.querySelectorAll("pre");
        codePre.forEach((codeBlock, i) => {
          // 给pre外层外层添加div
          let codeWrapper = document.createElement("div");
          codeWrapper.classList.add("code-wrapper");
          codeBlock.parentNode.insertBefore(codeWrapper, codeBlock);
          codeWrapper.appendChild(codeBlock);

          // 给div里添加button按钮，与pre平级
          const id = `code-block-${i + 1}`;
          codeBlock.setAttribute("id", id);
          const button = document.createElement("button");
          button.innerHTML = "Copy";
          button.setAttribute("class", "copy-button");
          button.setAttribute("data-clipboard-target", `#${id}`);
          codeBlock.parentNode.insertBefore(button, codeBlock.nextSibling);
          button.addEventListener("click", () => {
            button.innerHTML = "Code copied to clipboard";
            setTimeout(() => {
              button.innerHTML = "Copy";
            }, 2000);
          });
        });
      }
    </script>
  </body>
</html>
